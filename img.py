# _*_ coding:utf-8 _*_ 

table=[
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
    ]
def base64_decode(s='MTExMTE='):

    s=s.split('=')[0]

    l=[]
    for i in s:
        index=table.index(i)
        
        b=bin(index)
        b=b[2:]
        c=6-len(b)
        if c:
            b='0'*c+b
        print b
        l.append(b)

    # print l
    nb=''.join(l)
    # print nb
    length=len(nb)

    c=length%8
    p=length/8

    if c:
        nb=nb[0:-c]
        p=p

    assert len(nb)%8==0,u'len(nb)必须是8的倍数'
    s=''
    for i in range(p):
        start=i*8
        end=start+8
        b=nb[start:end]
        num=int(b,2)
        c=chr(num)
        s+=c


    return s



s='R0lGODdhlgA8AIcAAP7+/gICAhYWFufn59jY2MbGxicnJ0dHR1dXV3l5eZeXl4iIiLi4uDQ0NKen↵p2dnZzo6OqampvLy8pubm+jo6LOzs4aGhsLCwi8vL35+fgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA↵AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAlgA8AEAI/wABCBxI↵sKDBgwgTKlzIsKHDhxAjSpzYcEACAQEeEADAsaPHjyBDigxZ4ECAAAkGAFjJsqXLlzBjypwZk4GB↵AA8GANjJk0GAnw0KABhKtKhRAggCBDDAAIBTCgoEBAhgQMEAAFgBEHgQIICAAwICBIBAAIDZs2jT↵KggQQIAFAHDjyp1Lt67du3jrIgjA90GBCw4SHAhAuLBhBQASK16sWAKDAwEiB0hgIEAABwAya968↵WUCAABAoLBAQIICAAQBSq1Y94ECAAAkGAJhNu7bt27hz695te8CDAAEOFABAvLhx4xYCKD9QAIDz↵59CjFzgQIACCBQ0CaD+wwIGDCg4QCP8YH6D8gQIA0qufICBAgAMFAMgHoEBAgAAWAOjfz7+/f4AA↵BA4kWNDgQYQDBwgIEADBAAARJU6kGJFCAIwCKgDg2NHjxwEJAoyMAMDkSZMEDgQIYKAAAJgxZcok↵ICBAgAQRAgQ4MADAT6BBhQ4lWtToUaMFEhgI0NRpUwcApE6leiBAAAYAtG7lyjWBAQECDAgIEECA↵gAMOBgBg29btW7hx5c6lW9fuXbx59e7l29fvX8CBBQ8mXNhw3gEAFC9m3BhAgQMBAhwoAMDy5csS↵CijgnEABAQChQw8YAMD0adSpTycI0DoBANixZc+mXdv2bdwUAgQQgABBgwDBAwgoAMD/+HHjFAIs↵F1ABwHPo0aVTSBDA+gQACgQEEOAAwHfw4b87CBDgwYEA6RUAYN/effsEAQIYIADA/n38+fXv59/f↵P0AAAgcyMBAgQIIBABYybLjwQICIEidSFJCgwAAJCgwEONAgQIAGBQCQLGmSpAIBAQQsGAAAgIQD↵AWZOAGDzJgAGEAIEUADgJ9CgQocSLWr06FAHAQIYUADgKdSoUgEwCGC1QQEAWrdy7UoAQYAABhgA↵KGv2LAAHAQIISDAAANy4cQcsCBDAwAQAABwECGAgAoDAggcTLmz4MOLEhREEaKwAAOTIkidLFhDg↵sgIAmjdz3qyAAIDQokVLiAAhAGoF/xIAsG7t+rXrBQFmB1gA4Dbu3Lp38+7t+zfw4MKHEy9u/Djy↵5MqXM2/u/Dn06NKnU68unYGBAAEEAOju/Tv48OLHix/wIEAAAwUAsG/v/j38+PLn06+fIIACAPr3↵DxAQAGAABAQAFDR4ECGBBgEYDgDwEKIDAwEoVrR4QIGAABsdAPD4EWRIAAQaBAiAYAAAlStZtnT5↵EmZMmTEVGAjwgAAAnTsBDDgQIACEAgCIFjV6lACCAEsdAABQAEKAAA0KALB69WqBAwIgGAjw9QAB↵AGPJliXrwECAAAsAtHX7Fm5cuXPp1nU7gMAFBwkaBPD7FzCECQQADHgQIICBCAAYN/92/HhAAgEB↵AiRYECCAgQgAOHf23HmCgQAIIhwIEKABAwCrWbcGYCFA7AQAaNe2fRt3bt27eet2ECCAgAQSABQ3↵XnwAAQITAgQQsEACAOkACChoEAB7du0BGkAIEKABAwDjyZcnH8FAAAgFAACYECCAgAQDANS3Xz9C↵gAACFgDwDxCAwIEECxo8iDChQoIUAjhsMACAxIkUJxYIgDFjAAMKCAD4CDIkAwMBBCAwECDAgQEA↵Wrp0WcFAgJkQANi0SQBBgAACCAD4CVRBgAAHBgA4ijSp0qVMmzp9ylRAgKkVAFi9ijXrAAEBAiAY↵ACCs2LFkCTQIgHYAgAEJDAQQECD/gAAEBQAoMBAgQAMKAPr67atAQIAACgAYBoAgQIAEABo7fgw5↵suTJlCtLXiAgQIAFAwB4/gw6NIABBwIEOFAAgOrVrFsTQBAgNgMAtGvbRhAg9wQAvHv75l3gQIAA↵DwgMQBAgwAQAzJs7fw49uvTp1KNPMBBAwAQA3Lt7/96dwoMAAQxEAIA+vfr1AxIICBAgA4D59Akg↵CIA/AYD9/Pv7BwgAwAIBAQwatABA4UKGDR0+hBhRIsQCDQJcFPCgwAAAHT1+BDkhQAABCwCcRJkS↵AIUFAVwaQIAAAgIEAgLcDNBgAgCePX3+BAqAgYADAIweRZpU6VKmTZ0+XUrhQAIH/wWsAsCaVetW↵rl29fgUbVuxYsmXNnkWbVu1atm3dvoUbV+5cunXt3sWbV+9evn39/gUceO8ACgAMH0acWPFixo0d↵P4YcGXEFAQEsUwCQWfNmzp09f/asIMBoBgBMn0adWvVq1q1dv4YdO3WBAwECHBgAQPdu3r19/wbu↵m4GAAAEQDACQXPly5s2dP4ceXTqAARIAXMc+IIGAAAgIAAAfXvz4Ag0CnGcAQP16AAQUNAgQX74A↵BAwiGAgQ4AABAP39AwQgcCBBCQ8EBBDAAADDhg4fQowocSLFig4CCCAAYCPHAQE+NiAAYCTJkiYJ↵IAgQQMAAAC5dOgggM4AABAsOBP/ImfOAgQA+IQAIKnQoUQAFAiBdAGAp06ZOn0KNKnXq1AEPAjSI↵AGArVwAFDgQIcKAAgLJmz6IlgCAAWwsA3i4QECDAgQIA7uIFMCCBAAMHDAQIYCACgMKGDx8ugCBA↵gAMMAECOLHky5cqWL2OGLAEAAAkSAACIYCBAAAcATqNGLSBAAAMMAMCOLXv2gAcBbhcAMOBBgAAN↵CgAILnw4AAQBAiAIoDwAAQDOn0N/HiEAdQYArmPPrn079+7ev18vgMBAgPLmzQt4UGAAgPbtCTwI↵EMBABAD27+PPPyBBgP4IADIQECDAgQEAECZUiDBCgAAHEggIEOAAAQAXMWYEUMD/QIAADyQAEDmS↵ZEmTJ1GmVHlSwgIBAWAKCDCTJk0MAgIEEKAAQE+fP4FKSCAgQIAFCAIEeEAAQFOnT50iCBAAAYED↵AbAmGACAa1evCwQEMMAAQFmzZ9GmVbuWbdu1FALENUAAQF0JAwhUWIDAQIAEAQArADCYMOEBDg4E↵ULw4gAEEAQIIcACAcmXLlQk0CBAgAoABDwIEEFAAQGnTpgkEUL0AQGvXr2HHlj2bdu3ZAx4ECHCA↵AQDfv4H7ThAggIAEBAgkMBCAeXPnzAUECGAAQoAACAgA0L6du3YCCAIEQEAAAAAGDQIEMOAAQHv3↵AAY8CBAAAQEA9/Hn17+ff3///wABCBxIsOBACAESVgDAsKHDhhMCSJxIMYCABQQAaNxYQUAAAxAC↵iGQAoKTJkwAKCAgQwEABADABLBAQIMCDAQBy6mQgIECAAgCCCh1KtKjRo0iTHnUQIICABQCiSp06↵1UGAqwISDADAtatXrwUgBBCAAEGAsw0qSADAli2BBwHixkUAoK5dBQECCFAAoG/fAg0CBEAAoLDh↵w4gTK17MuPFiBQYCBEgwAIDly5gxMzAQIAACAgBCix5NukCDAKgZEEggIIDr164XKIAQIIAABwBy↵6wZAAEGA3w4ACAegQEAACAUAKF/OvLnz59CjS38+IID1AwMAaN/OvfuAAOAbEP8AQL68+fMEEAQI↵IGAAgPcACDAoMGAAAAAUGgQIIEABAIAABA4USMBAgAAHCAAAQEBAgAALAEykWNHiRYwZNW7ESABB↵gAAHCgAgWdLkSQAFDgQIcKAAAJgxZc4kgCDATQsAdO7kWeBAgAAHCgAgWtQogAUBlCYAAGCBgAAP↵BgCgWtXqVaxZtW7lmtVAALAFAIwlW9YsWQEBAhgoAMDtW7hxBzwIULcAALx58xYQECAAhAEABA8m↵PFhBgAACChAQEEBAAQCRJU+mXNnyZcyZLTMwEEDAAgChRY8mLZrAgwABDEQA0Nr1a9gDEgSgjQDA↵bdwACBwIEMBABADBhQ8nTuD/QYAABhoECHAAwHPo0aVPp17d+vXqDwJsdwDA+3fw4cEfCBBAgAIA↵6dWvZy9hgYAADADMp0/gQIAAAhIMANDfP0AAAgcSBFAAQoCEARAQAODwIcSIEidSrGiRYoUAGg8Q↵AODxI8iQHxcEKKkAAMqUKlESEHDAAYEBAGYCGFDBQICcARYA6OnzJ9CgBQIQDZAAANKkSpcyber0↵KVSoEwwEqCqgwYGsCRgMAOD1K9gEAQIISDAAANq0agc4OCAgANy4cg0sIADgLt68evfy7ev3L+DA↵gvUWeNAggAADARYHoADgMeTIkidTjqzgAgECBSQA6Oz5M+jQokeTLm36NOrUIKpXs27t+jXs2LJn↵065t+zbu3Lp38+7t+zfw4MKHtw4IADs=↵'

s=s.replace('↵','')


html_s='<img src="data:image/jpg;base64,%s"/>'%s

import base64

# ds=base64.b64decode(s)
# print type(ds)
# for i in ds:
#     print i
ds=base64_decode(s)

print ds

with open('ds.jpg','wb')as f:
    f.write(ds)